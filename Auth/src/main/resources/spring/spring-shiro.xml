<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"
       default-lazy-init="true">

	<description>Shiro Configuration</description>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- 记住密码Cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe"/>
		<property name="httpOnly" value="true"/>
		<!-- 7天,采用spring el计算方便修改[细节决定成败]！ -->
		<property name="maxAge" value="#{7 * 24 * 60 * 60}"/>
	</bean>

	<!-- rememberMe管理器,cipherKey生成见{@code Base64Test.java} -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('5aaC5qKm5oqA5pyvAAAAAA==')}"/>
		<property name="cookie" ref="rememberMeCookie"/>
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="ShiroRealm" />
		<property name="sessionManager" ref="sessionManager"/>
				<!-- 使用下面配置的缓存管理器 -->
		<property name="cacheManager" ref="shiroSpringCacheManager"/>
		<!-- 记住密码管理 -->
		<property name="rememberMeManager" ref="rememberMeManager"/>
	</bean>
		
		<!-- 项目自定义的Realm -->
	    <bean id="ShiroRealm" class="com.project.interceptor.shiro.ShiroRealm" >
			<constructor-arg index="0" name="cacheManager" ref="shiroSpringCacheManager"/>
			<!-- 启用身份验证缓存，即缓存AuthenticationInfo信息，默认false -->
			<property name="authenticationCachingEnabled" value="true"/>
			<!-- 缓存AuthenticationInfo信息的缓存名称 -->
			<property name="authenticationCacheName" value="authenticationCache"/>
			<!-- 缓存AuthorizationInfo信息的缓存名称 -->
			<property name="authorizationCacheName" value="authorizationCache"/>

		</bean>

		<!-- Shiro Filter -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager" />
			<property name="loginUrl" value="/login" />
			<property name="successUrl" value="/WEB-INF/jsp/system/index/index" />
			<property name="unauthorizedUrl" value="/WEB-INF/jsp/umanth.jsp" />
			<!-- anon:匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤
            		authc:如果没有登录会跳到相应的登录页面登录
            		user:用户拦截器，用户已经身份验证/记住我登录的都可 -->
			<property name="filterChainDefinitions">
				<value>
					/checkLogin                 = anon
					/doLogin                    = anon
					/login                      = anon
					/404.jsp                    = anon
					/index.jsp                  = anon
					/WEB-INF/jsp/login          = anon
					/static/login/** 			= anon
					/static/js/myjs/** 			= authc
					/static/js/** 				= anon
					/uploadFiles/uploadImgs/** 	= anon
					/code.do 					= anon
					/login_login	 			= anon
					/app**/** 					= anon
					/weixin/** 					= anon
					/**							= authc
				</value>
			</property>
		</bean>
	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置全局会话超时时间 半小时 -->
		<property name="globalSessionTimeout" value="#{30 * 60 * 1000}"/>
		<!-- url上带sessionId 默认为true -->
		<!--<property name="sessionIdUrlRewritingEnabled" value="false"/>-->
		<property name="sessionDAO" ref="sessionDAO"/>
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true"/>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<!-- 需要让此session可以使用该定时调度器进行检测 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 定义sessionIdCookie模版可以进行操作的启用 -->
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>

	<!-- 定义Session ID生成管理器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
	<!-- 会话DAO 用于会话的CRUD -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!-- Session缓存名字，默认就是shiro-activeSessionCache -->
		<property name="activeSessionsCacheName" value="activeSessionCache"/>
		<property name="cacheManager" ref="shiroSpringCacheManager"/>
		<!-- 定义该Session DAO操作中所使用的ID生成器 -->
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>

	<!-- 配置需要向Cookie中保存数据的配置模版 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID --> <constructor-arg value="mySessionId"/>
		<!-- 保证该系统不会受到跨域的脚本操作供给 -->
		<property name="httpOnly" value="true"/>
		<!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
		<property name="maxAge" value="-1"/>
	</bean>
	<!-- 在方法中 注入  securityManager ，进行代理控制 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
		<property name="arguments" ref="securityManager"/>
	</bean>
	<!-- 注册ehcache缓存管理器 -->
	<bean id="shiroSpringCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 注册配置文件的路径 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>
	</bean>
	<!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
	<bean id="sessionValidationScheduler"
		  class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<!-- 设置session的失效扫描间隔，单位为毫秒 -->
		<property name="interval" value="100000"/>
		<!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
</beans>
